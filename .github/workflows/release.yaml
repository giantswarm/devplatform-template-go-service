name: Release project

on:
  push:
    tags:
      - "*"
  pull_request:
  workflow_dispatch: {}

jobs:
  validate-and-test:
    uses: "./.github/workflows/validate-test.yaml"
  release-binary-and-image:
    permissions:
      contents: write # needed to write releases
      id-token: write # needed for keyless signing
      packages: write # needed for ghcr access
    needs: [validate-and-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Checkout - force fetch tags
        run: git fetch --force --tags
      - name: Setup Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: 1.22.2
          cache: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: "amd64,arm64"
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: "linux/amd64,linux/arm64"
      - name: Setup Syft
        uses: anchore/sbom-action/download-syft@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0.16.0
      - name: Setup Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      - name: Setup Helm
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: helm/helm
          tag: v3.12.3
          cache: enable
      - name: Setup app-build-suite
        run: curl -fsSL https://github.com/giantswarm/app-build-suite/releases/latest/download/dabs.sh -o /tmp/dabs.sh && chmod +x /tmp/dabs.sh && sed -i 's/docker run -it --rm/docker run --rm/' /tmp/dabs.sh
      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ghcr.io
          username: build_bot
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login helm to OCI registry
        run: helm registry login ghcr.io -u build_bot -p "${{ secrets.GITHUB_TOKEN }}"
      - name: Run GoReleaser for tag build
        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811 # v5.1.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: "~> v2"
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run GoReleaser for snapshot build
        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811 # v5.1.0
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          version: "~> v2"
          args: release --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: upload snapshot docker images - prepare image list
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: jq -r '.[] | select(.type=="Docker Image" and (.name | contains(":latest") | not)) | .name' dist/artifacts.json | paste -sd ' ' /dev/stdin > images
      - name: upload snapshot docker images - upload images
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: cat images | xargs -d ' ' -I{} -n1 sh -c "docker push {}"
      - name: upload snapshot docker images - capture version
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "SNAPSHOT_IMAGE_TAG=$(jq -r '.version' dist/metadata.json)" >> "$GITHUB_ENV"
      - name: upload snapshot docker images - create manifests
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          docker manifest create ghcr.io/$(echo "$GITHUB_REPOSITORY" | awk '{print tolower($0)}'):$SNAPSHOT_IMAGE_TAG $(cat images)
          docker manifest push ghcr.io/$(echo "$GITHUB_REPOSITORY" | awk '{print tolower($0)}'):$SNAPSHOT_IMAGE_TAG
      - name: Run app-build-suite to build the helm chart
        run: set -o pipefail && /tmp/dabs.sh -c helm 2>&1 | tee /tmp/abs.log
      - name: Capture the helm chart name
        run: >-
          echo "CHART_FILE=$(
            awk -F":" '/packaged chart and saved it to/ {gsub(/ /, ""); print $2}' /tmp/abs.log
          )" >> "$GITHUB_ENV"
      - name: Capture the helm chart version
        run: >-
          echo "CHART_VERSION=$(
            awk -F"[:,]" '/=> \(version/ {gsub(/[ "]/, ""); print $2; exit }' /tmp/abs.log
          )" >> "$GITHUB_ENV"
      - name: Check detected version
        run: '[ -z "${CHART_FILE}" ] && exit 1 || echo "CHART_FILE=${CHART_FILE}"; [ -z "${CHART_VERSION}" ] && exit 1 || echo "CHART_VERSION=${CHART_VERSION}"'
      - name: Push the helm chart to registry
        run: set -o pipefail && helm push "${CHART_FILE}" "oci://ghcr.io/demotechinc/charts" 2>&1 | tee /tmp/helm-push.log
      - name: Capture the helm chart SHA256
        run: >-
          echo "CHART_SHA256=$(
            awk -F" " '/^Digest:/ {print $2}' /tmp/helm-push.log
          )" >> "$GITHUB_ENV"
      - name: Sign the helm chart
        run: cosign sign --upload=true -y "ghcr.io/[[repo-owner]]/charts/[[project-name]]@${CHART_SHA256}"
